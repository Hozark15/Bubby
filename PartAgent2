import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import logging
import sys

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_data(file_path):
    """Load dataset from a CSV file."""
    try:
        data = pd.read_csv(file_path)
        logging.info(f"Data loaded successfully from {file_path}")
        return data
    except FileNotFoundError:
        logging.error(f"File {file_path} not found")
        sys.exit(1)
    except pd.errors.ParserError:
        logging.error(f"Error parsing the file {file_path}")
        sys.exit(1)

def prepare_data(data):
    """Prepare data for training and testing."""
    X = data.drop('required_part', axis=1)
    y = data['required_part']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    logging.info("Data preparation completed")
    return X_train, X_test, y_train, y_test

def train_model(X_train, y_train):
    """Train the Random Forest model."""
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    logging.info("Model training completed")
    return model

def evaluate_model(model, X_test, y_test):
    """Evaluate the model using various metrics."""
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')
    logging.info(f'Accuracy: {accuracy * 100:.2f}%')
    logging.info(f'Precision: {precision * 100:.2f}%')
    logging.info(f'Recall: {recall * 100:.2f}%')
    logging.info(f'F1 Score: {f1 * 100:.2f}%')
    return accuracy, precision, recall, f1

if __name__ == "__main__":
    # File path to the dataset
    file_path = 'aircraft_parts_discrepancies.csv'
    
    # Load and prepare data
    data = load_data(file_path)
    X_train, X_test, y_train, y_test = prepare_data(data)
    
    # Train the model
    model = train_model(X_train, y_train)
    
    # Evaluate the model
    evaluate_model(model, X_test, y_test)
